use paperclip::actix::{
    api_v2_operation,
    web::{self, Json},
};
use super::schemas;
use crate::{db_helpers, errors, modules, types};

#[api_v2_operation(tags(Transaction))]
/// Get transaction from a transaction hash
///
/// This endpoint returns the details of a transaction given `tx_hash`
pub async fn get_tx_by_tx_hash(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::TransactionRequest>,
) -> crate::Result<Json<schemas::TransactionResponse>> {
    Ok(Json(schemas::TransactionResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get transaction from a receipt id
///
/// This endpoint returns the transaction details of the tx that generated a given `receipt_id`
pub async fn get_tx_by_receipt_id(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::TransactionRequestByReceiptId>,
    // TODO PHASE 2 pagination by index (recently updated go first)
    pagination_params: web::Query<types::query_params::PaginationParams>,
) -> crate::Result<Json<schemas::TransactionResponse>> {
    Ok(Json(schemas::TransactionResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get receipts generated by a transaction
///
///
/// This endpoint returns details of receipts associated with a transaction given a `transaction_hash`
pub async fn get_tx_receipts_by_tx_hash(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::ReceiptsRequestsByTransactionHash>,
) -> crate::Result<Json<schemas::ReceiptsResponse>> {
    Ok(Json(schemas::ReceiptsResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get history of transactions on an account
///
/// This endpoint returns the history of transactions for a given `account_id`
///
/// This endpoint supports pagination
pub async fn get_txs_by_account_id(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    pool_balances: web::Data<db_helpers::DBWrapper>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::TransactionsRequestByAccountId>,
    pagination_params: web::Query<types::query_params::HistoryPaginationParams>,
) -> crate::Result<Json<schemas::TransactionsResponse>> {
    // modules::check_account_exists(&rpc_client, &request.account_id.0, block.height).await?;
    //let pagination =    modules::check_and_get_history_pagination_params(&pool, pagination_params.0).await?;

    Ok(Json(schemas::TransactionsResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get transaction history for a Near Account on a particular Near Contract
///
/// This endpoint returns history of transactions that a given `account_id` performed on a Near
/// `contract_id`
pub async fn get_txs_by_account_id_on_contract_id(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::TransactionsRequestByAccountIdAndContractId>,
    pagination_params: web::Query<types::query_params::HistoryPaginationParams>,
) -> crate::Result<Json<schemas::TransactionsResponse>> {
    //    let pagination = modules::check_and_get_history_pagination_params(&pool, pagination_params.0).await?;
    //   modules::check_account_exists(&rpc_client, &request.account_id.0, pagination.block_height)
    //      .await?;

    Ok(Json(schemas::TransactionsResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get history of action receipts for a Near Account
///
/// This endpoint returns an ordered list of actions on an `account_id`
///
/// This endpoint supports pagination
pub async fn get_actions_by_account_id(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::ActionReceiptsRequestByAccountId>,
) -> crate::Result<Json<schemas::ActionReceiptsResponse>> {
    //    types::query_params::check_block_params(&block_params)?;
    //   let block = db_helpers::get_block_from_params(&pool, &block_params).await?;

    Ok(Json(schemas::ActionReceiptsResponse {}))
}

#[api_v2_operation(tags(Transaction))]
/// Get history of all action receipts for a Near Account on a Near Contract
///
/// This endpoint will retrieve an ordered list of actions performed by a `account_id`
/// on a particular `contract_id`
///
/// This endpoint supports pagination
pub async fn get_actions_by_account_id_on_contract_id(
    pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    request: actix_web_validator::Path<schemas::ActionReceiptsRequestAccountIdAndContractId>,
) -> crate::Result<Json<schemas::ActionReceiptsResponse>> {
    //    types::query_params::check_block_params(&block_params)?;
    //   let block = db_helpers::get_block_from_params(&pool, &block_params).await?;

    Ok(Json(schemas::ActionReceiptsResponse {}))
}
