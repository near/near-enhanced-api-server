use super::schemas;
use paperclip::actix::{
    api_v2_operation,
    web::{self, Json},
};

#[api_v2_operation(tags(Transaction))]
/// Get transaction
///
/// This endpoint returns the details of a transaction given a `tx_hash` or `receipt_id`
pub async fn get_transaction(
    _pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    _rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    _params: web::Query<schemas::TransactionRequest>,
    // request: actix_web_validator::Path<schemas::TransactionRequest>,
) -> crate::Result<Json<schemas::TransactionResponse>> {
    Ok(Json(schemas::TransactionResponse {
        transaction: schemas::Transaction {
            signer_id: "signer_id".to_string(),
            public_key: "public_id".to_string(),
            receiver_id: "receiver_id".to_string(),
            block_hash: "block_hash".to_string(),
            actions: Vec::new(),
        },
    }))
}

#[api_v2_operation(tags(Transaction))]
/// Get user's transaction history
///
/// This endpoint returns the history of transactions made by an `account_id`
/// Additonally, you can specify `contract_id` to retrieve transactions that a given `account_id` performed on a Near
/// `contract_id`
pub async fn get_transactions(
    _pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    _rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    _params: web::Query<schemas::TransactionsRequest>,
    // request: actix_web_validator::Path<schemas::TransactionsRequest>,
) -> crate::Result<Json<schemas::TransactionsResponse>> {
    let transactions: Vec<schemas::Transaction> = Vec::new();

    Ok(Json(schemas::TransactionsResponse { transactions }))
}

#[api_v2_operation(tags(Transaction))]
/// Get transaction receipts
///
/// This endpoint will retrieve an ordered list of receipts generated by a `tx_hash`
pub async fn get_receipts(
    _pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    _rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    _request: actix_web_validator::Path<schemas::ReceiptsRequest>,
) -> crate::Result<Json<schemas::ReceiptsResponse>> {
    let receipts: Vec<schemas::Receipt> = Vec::new();
    Ok(Json(schemas::ReceiptsResponse { receipts }))
}

#[api_v2_operation(tags(Transaction))]
/// Get user's actions
///
/// This endpoint will retrieve an ordered list of actions performed by an `account_id`
///
/// Additionally, you can specify `contract_id` to retrieve actions that a given `account_id` performed on a Near
/// `contract_id`

pub async fn get_action_receipts(
    _pool: web::Data<sqlx::Pool<sqlx::Postgres>>,
    _rpc_client: web::Data<near_jsonrpc_client::JsonRpcClient>,
    _: crate::types::pagoda_api_key::PagodaApiKey,
    _request: actix_web_validator::Path<schemas::ActionReceiptsRequest>,
) -> crate::Result<Json<schemas::ActionReceiptsResponse>> {
    let action_receipts: Vec<schemas::ActionReceipt> = Vec::new();

    Ok(Json(schemas::ActionReceiptsResponse { action_receipts }))
}
